da_out
da <- seq.Date(as.Date(init, format = "%d %m %Y"), by = "day")
da <- seq.Date(as.Date(init, format = "%d %m %Y"), by = "day", along.with = nrow(f))
head(da)
da
nrow(f)
length(f)
da <- seq.Date(as.Date(init, format = "%d %m %Y"), by = "day", length.out = nrow(f))
da
tail(da)
ff <- cbind(f, da)
head(ff)
nrow(f)
length(da)
head(f)
f <- read.csv(here::here('data_raw/prec_diaria_wimmed/', name_f), skip = 2)
head(f)
f <- read.csv(here::here('data_raw/prec_diaria_wimmed/', name_f), skip = 1)
head(f)
f <- read.csv(here::here('data_raw/prec_diaria_wimmed/', name_f), skip = 2, header=FALSE)
head(f)
v <- read.csv(here::here('data_raw/prec_diaria_wimmed/', name_f), skip = 2, header=FALSE)
init <- read_lines(here::here('data_raw/prec_diaria_wimmed/', name_f), skip = 0, n_max = 1)
valores <- cbind(v, seq.Date(as.Date(init, format = "%d %m %Y"), by = "day", length.out = nrow(v)))
head(valores)
names(valores) <- c('prec', 'date')
head(valores)
precWimmed <- function(x) {
require(stringr)
out <- list()
name_f <- w_files[i]
a <- str_split(name_f, pattern = "_")
start_date <- as.Date(a[[1]][1], format = "%Y-%m-%d")
end_date <- as.Date(a[[1]][2], format = "%Y-%m-%d")
variable <- a[[1]][3]
station <- str_split(str_remove(a[[1]][4], pattern = ".txt"), pattern = " - ")
station_code <- station[[1]][1]
station_name <- station[[1]][2]
out$station_md <- cbind(station_code, station_name, variable, star_date, end_date)
v <- read.csv(here::here('data_raw/prec_diaria_wimmed/', name_f), skip = 2, header=FALSE)
init <- read_lines(here::here('data_raw/prec_diaria_wimmed/', name_f), skip = 0, n_max = 1)
valores <- cbind(station_code, v, seq.Date(as.Date(init, format = "%d %m %Y"), by = "day", length.out = nrow(v)))
names(valores) <- c("station_code", "prec", "date")
out$valores
return(out)
}
w_files <- list.files(here::here('data_raw/prec_diaria_wimmed/'), pattern="*.txt")
w_files[1]
path <- here::here("data_raw/prec_diaria_wimmed/")
name_f <- w_files[1]
path <- here::here("data_raw/prec_diaria_wimmed/")
name_f <- w_files[1]
precWimmed <- function(path, name_f) {
require(stringr)
out <- list()
a <- str_split(name_f, pattern = "_")
start_date <- as.Date(a[[1]][1], format = "%Y-%m-%d")
end_date <- as.Date(a[[1]][2], format = "%Y-%m-%d")
variable <- a[[1]][3]
station <- str_split(str_remove(a[[1]][4], pattern = ".txt"), pattern = " - ")
station_code <- station[[1]][1]
station_name <- station[[1]][2]
out$station_md <- cbind(station_code, station_name, variable, star_date, end_date)
v <- read.csv(paste0(path, name_f), skip = 2, header=FALSE)
init <- read_lines(paste0(path, name_f), skip = 0, n_max = 1)
valores <- cbind(station_code, v, seq.Date(as.Date(init, format = "%d %m %Y"), by = "day", length.out = nrow(v)))
names(valores) <- c("station_code", "prec", "date")
out$valores
return(out)
}
tetilla <- precWimmed(path, name_f)
tetilla
a <- str_split(name_f, pattern = "_")
a
end_date <- as.Date(a[[1]][2], format = "%Y-%m-%d")
end_date
p <- here::here("data_raw/prec_diaria_wimmed/")
n <- w_files[1]
precWimmed <- function(path, name_f) {
require(stringr)
out <- list()
a <- str_split(name_f, pattern = "_")
start_date <- as.Date(a[[1]][1], format = "%Y-%m-%d")
end_date <- as.Date(a[[1]][2], format = "%Y-%m-%d")
variable <- a[[1]][3]
station <- str_split(str_remove(a[[1]][4], pattern = ".txt"), pattern = " - ")
station_code <- station[[1]][1]
station_name <- station[[1]][2]
out$station_md <- cbind(station_code, station_name, variable, star_date, end_date)
v <- read.csv(paste0(path, name_f), skip = 2, header=FALSE)
init <- read_lines(paste0(path, name_f), skip = 0, n_max = 1)
valores <- cbind(station_code, v, seq.Date(as.Date(init, format = "%d %m %Y"), by = "day", length.out = nrow(v)))
names(valores) <- c("station_code", "prec", "date")
out$valores
return(out)
}
tetilla <- precWimmed(path = p, name_f = n)
tetilla
v <- read.csv(paste0(path, name_f), skip = 2, header=FALSE)
v
v <- read.csv(paste0(path, name_f), skip = 2, header=FALSE)
init <- read_lines(paste0(path, name_f), skip = 0, n_max = 1)
valores <- cbind(station_code, v, seq.Date(as.Date(init, format = "%d %m %Y"), by = "day", length.out = nrow(v)))
names(valores) <- c("station_code", "prec", "date")
w_files <- list.files(here::here('data_raw/prec_diaria_wimmed/'), pattern="*.txt")
p <- here::here("data_raw/prec_diaria_wimmed/")
n <- w_files[1]
precWimmed <- function(path, name_f) {
require(stringr)
out <- list()
a <- str_split(name_f, pattern = "_")
start_date <- as.Date(a[[1]][1], format = "%Y-%m-%d")
end_date <- as.Date(a[[1]][2], format = "%Y-%m-%d")
variable <- a[[1]][3]
station <- str_split(str_remove(a[[1]][4], pattern = ".txt"), pattern = " - ")
station_code <- station[[1]][1]
station_name <- station[[1]][2]
out$station_md <- cbind(station_code, station_name, variable, star_date, end_date)
v <- read.csv(paste0(path, name_f), skip = 2, header=FALSE)
init <- read_lines(paste0(path, name_f), skip = 0, n_max = 1)
valores <- cbind(station_code, v, seq.Date(as.Date(init, format = "%d %m %Y"), by = "day", length.out = nrow(v)))
names(valores) <- c("station_code", "prec", "date")
out$valores <- valores
return(out)
}
tetilla <- precWimmed(path = p, name_f = n)
library("here")
library("tidyverse")
library("stringr")
w_files <- list.files(here::here('data_raw/prec_diaria_wimmed/'), pattern="*.txt")
p <- here::here("data_raw/prec_diaria_wimmed/")
n <- w_files[1]
precWimmed <- function(path, name_f) {
require("stringr")
out <- list()
a <- str_split(name_f, pattern = "_")
start_date <- as.Date(a[[1]][1], format = "%Y-%m-%d")
end_date <- as.Date(a[[1]][2], format = "%Y-%m-%d")
variable <- a[[1]][3]
station <- str_split(str_remove(a[[1]][4], pattern = ".txt"), pattern = " - ")
station_code <- station[[1]][1]
station_name <- station[[1]][2]
out$station_md <- cbind(station_code, station_name, variable, star_date, end_date)
v <- read.csv(paste0(path, name_f), skip = 2, header=FALSE)
init <- read_lines(paste0(path, name_f), skip = 0, n_max = 1)
valores <- cbind(station_code, v, seq.Date(as.Date(init, format = "%d %m %Y"), by = "day", length.out = nrow(v)))
names(valores) <- c("station_code", "prec", "date")
out$valores <- valores
return(out)
}
tetilla <- precWimmed(path = p, name_f = n)
w_files <- list.files(here::here('data_raw/prec_diaria_wimmed/'), pattern="*.txt")
w_files <- list.files(here::here('data_raw/prec_diaria_wimmed/'), pattern="*.txt")
w_files
p <- here::here("data_raw/prec_diaria_wimmed/")
p
n <- w_files[1]
out <- list()
name_f <- n
a <- str_split(name_f, pattern = "_")
a
start_date <- as.Date(a[[1]][1], format = "%Y-%m-%d")
start_date
end_date <- as.Date(a[[1]][2], format = "%Y-%m-%d")
end_date
variable <- a[[1]][3]
station <- str_split(str_remove(a[[1]][4], pattern = ".txt"), pattern = " - ")
station_code <- station[[1]][1]
library("here")
library("tidyverse")
library("stringr")
w_files <- list.files(here::here('data_raw/prec_diaria_wimmed/'), pattern="*.txt")
p <- here::here("data_raw/prec_diaria_wimmed/")
n <- w_files[1]
precWimmed <- function(path, name_f) {
require("stringr")
out <- list()
a <- str_split(name_f, pattern = "_")
start_date <- as.Date(a[[1]][1], format = "%Y-%m-%d")
end_date <- as.Date(a[[1]][2], format = "%Y-%m-%d")
variable <- a[[1]][3]
station <- str_split(str_remove(a[[1]][4], pattern = ".txt"), pattern = " - ")
station_code <- station[[1]][1]
station_name <- station[[1]][2]
out$station_md <- cbind(station_code, station_name, variable, start_date, end_date)
v <- read.csv(paste0(path, name_f), skip = 2, header=FALSE)
init <- read_lines(paste0(path, name_f), skip = 0, n_max = 1)
valores <- cbind(station_code, v, seq.Date(as.Date(init, format = "%d %m %Y"), by = "day", length.out = nrow(v)))
names(valores) <- c("station_code", "prec", "date")
out$valores <- valores
return(out)
}
tetilla <- precWimmed(path = p, name_f = n)
tetilla$station_md
library("here")
library("tidyverse")
library("stringr")
w_files <- list.files(here::here('data_raw/prec_diaria_wimmed/'), pattern="*.txt")
p <- here::here("data_raw/prec_diaria_wimmed/")
n <- w_files[1]
precWimmed <- function(path, name_f) {
require("stringr")
out <- list()
a <- str_split(name_f, pattern = "_")
start_date <- a[[1]][1]
end_date <- a[[1]][2]
variable <- a[[1]][3]
station <- str_split(str_remove(a[[1]][4], pattern = ".txt"), pattern = " - ")
station_code <- station[[1]][1]
station_name <- station[[1]][2]
out$station_md <- cbind(station_code, station_name, variable, start_date, end_date)
v <- read.csv(paste0(path, name_f), skip = 2, header=FALSE)
init <- read_lines(paste0(path, name_f), skip = 0, n_max = 1)
valores <- cbind(station_code, v, seq.Date(as.Date(init, format = "%d %m %Y"), by = "day", length.out = nrow(v)))
names(valores) <- c("station_code", "prec", "date")
out$valores <- valores
return(out)
}
tetilla <- precWimmed(path = p, name_f = n)
tetilla$station_md
tetilla$valores
tail(tetilla$valores)
tetilla$station_md
o <- c()
p <- here::here("data_raw/prec_diaria_wimmed/")
for (i in 1:length(w_files)) {
ajo <- precWimmed(path = p, name_f = w_files[i])
o <- bind_rows(o, ajo$valores)
}
warnings()
head(o)
library("tidyverse")
o$prec <- ifelse(o$prec == -9999, NA, o$prec)
head(o$prec)
length(is.na(o$prec))
knitr::opts_chunk$set(echo = TRUE)
library("here")
library("tidyverse")
library("here")
library("tidyverse")
here()
prec_w <- read.csv(file = here::here("data/prec/wimmed2015/prec_wimmed_data.csv"))
head(prec_w)
nrow(prec_w %>% filter(is.na(prec)))
stations_w <- read.csv(file = here::here("data/prec/wimmed2015/prec_wimmed_stations.csv"))
library("here")
library("devtools")
library("tidyverse")
library("lubridate")
library("ggrepel")
devtools::source_gist("https://gist.github.com/ajpelu/cba6f5abf862d93faf4cf671a6910159", filename = "digiereClima.R")
d <- digiereClima(xmlfile = here::here("data_raw/climateREDIAM_Dec2018.xml"))
str(d)
stations <- d$station
stations
unique(stations_w$station_code)
head(prec_w)
d <- prec_w %>%
group_by(station_code, yr = lubridate::year(date), mon = lubridate:month(date)) %>%
summarise(monthly_rainfall = sum(prec),
n = n())
d <- prec_w %>%
group_by(station_code, yr = lubridate::year(date), mon = lubridate:month(date)) %>%
summarise(monthly_rainfall = sum(prec),
n = n())
d <- prec_w %>%
group_by(station_code, yr = lubridate::year(date), mon = lubridate::month(date)) %>%
summarise(monthly_rainfall = sum(prec),
n = n())
head(d)
d <- prec_w %>%
group_by(station_code, yr = lubridate::year(date), mon = lubridate::month(date)) %>%
summarise(monthly_rainfall = sum(prec, na.rm = TRUE),
n = n())
head(d)
head(d)[10]
head(d)[10,]
head(d, 10)
tail(d)
View(d)
d <- prec_w %>%
group_by(station_code, yr = lubridate::year(date), mon = lubridate::month(date)) %>%
summarise(monthly_rainfall = sum(prec, na.rm = TRUE),
n = count(prec))
d <- prec_w %>%
group_by(station_code, yr = lubridate::year(date), mon = lubridate::month(date)) %>%
summarise(monthly_rainfall = sum(prec, na.rm = TRUE),
n = n(prec))
d <- prec_w %>%
group_by(station_code, yr = lubridate::year(date), mon = lubridate::month(date)) %>%
summarise(monthly_rainfall = sum(prec, na.rm = TRUE),
n_noNA = sum(!is.na(prec)))
head(d)
d <- prec_w %>%
group_by(station_code, yr = lubridate::year(date), mon = lubridate::month(date)) %>%
summarise(monthly_rainfall = sum(prec, na.rm = TRUE),
n_noNA = sum(!is.na(prec), na.rm = TRUE))
head(d)
head(d, 20)
head(d, 50)
head(d, 50:60)
head(d, c(50:60))
View(d)
require(foreign)
f <- '/Users/ajpeluLap/ugrDrive/PROYECTOS/climaSN/data_raw/ESTACIONES.DBF'
?read.dbf
d <- read.dbf(file = f)
f <- '/Users/ajpeluLap/ugrDrive/PROYECTOS/climaSN/data_raw/ESTACIONES.DBF'
require(foreign)
d <- read.dbf(file = f)
f <- '/Users/ajpeluLap/ugrDrive/PROYECTOS/climaSN/data_raw/DATOS.DBF'
luLap/ugrDrive/PROYECTOS/climaSN/data_raw/DATOS.DBF'
require("foreign")
require("here")
d <- read.dbf(file = here::here("data_raw/DATOS.DBF"))
head(d)
# Read data of stations
s <- read.dbf(file = here::here("data_raw/ESTACIONES.DBF"))
head(s)
# Read data of stations from WiMMed
sw <- read.csv(here::here("data/prec/wimmed2015/prec_wimmed_stations.csv"), header = TRUE)
head(sw)
require("tidyverse")
library("foreign")
library("here")
library("tidyverse")
sn_stations <- s %>% filter(CODIGO %in% unique(sw$station_code))
install.packages("leaflet")
View(sw)
table(sw$variable)
library("flexdashboard")
library("foreign")
## Stations REDIAM 2.0
sr <- read.dbf(file = here::here("data_raw/ESTACIONES.DBF"))
library("flexdashboard")
library("rgdal")
library("leaflet")
library("raster")
library("sp")
library("tidyverse")
library("here")
library("foreign")
machine <- 'ajpelu'
machine <- 'ajpeluLap'
library("flexdashboard")
library("rgdal")
library("leaflet")
library("raster")
library("sp")
library("tidyverse")
library("here")
library("foreign")
machine <- 'ajpelu'
machine <- 'ajpeluLap'
# stations
stations <- read.csv(here::here("data_raw/cli_estaciones.csv"), header = TRUE, sep = ";")
# Remove NAs y valores equivocados
# Remove stations with n_records == 0
s <- stations %>%
mutate(fecha_inicio = as.Date(fecha_inicio, format = "%Y-%m-%d"),
fecha_fin = as.Date(fecha_fin, format = "%Y-%m-%d")) %>%
drop_na(long:lat) %>%
filter(long > -6) %>%
filter(numero_registros > 0)
sp_station <- SpatialPointsDataFrame(coords = s[, c("long", "lat")], data = s)
proj4string(sp_station) <- CRS("+init=epsg:4326")
### --- Read limits of Sierra Nevada Protected area
mydsn = paste0('/Users/', machine, '/Google Drive/carto_public/EENNPP/InfGeografica/InfVectorial/Shapes/ED50_30')
enp <- readOGR(dsn=mydsn, layer = 'EENNPP', encoding="UTF-8", verbose = FALSE)
# proj4string(enp) <- CRS("+init=epsg:23030")
enp_r <- spTransform(enp, CRS("+init=epsg:4326"))
# Select Sierra Nevada
sn <- subset(enp_r, NOMBRE == 'SIERRA NEVADA' & FIGURA == 'Espacio Natural')
sn_nat <- subset(enp_r, NOMBRE == 'SIERRA NEVADA' & FIGURA == 'Parque Nacional')
## Stations REDIAM 2.0
sr <- read.dbf(file = here::here("data_raw/ESTACIONES.DBF"))
head(sr)
## Stations REDIAM 2.0
sr <- read.dbf(file = here::here("data_raw/ESTACIONES.DBF"))
sr_station <- SpatialPointsDataFrame(sr = s[, c("X_COORD", "Y_COORD")], data = sr)
proj4string(sr_station) <- CRS("+init=epsg:23030")
sr <- read.dbf(file = here::here("data_raw/ESTACIONES.DBF"))
sr_station <- SpatialPointsDataFrame(sr = sr[, c("X_COORD", "Y_COORD")], data = sr)
proj4string(sr_station) <- CRS("+init=epsg:23030")
## Stations REDIAM 2.0
sr <- read.dbf(file = here::here("data_raw/ESTACIONES.DBF"))
sr_station <- SpatialPointsDataFrame(coords = sr[, c("X_COORD", "Y_COORD")], data = sr)
proj4string(sr_station) <- CRS("+init=epsg:23030")
sr <- spTransform(sr, CRS("+init=epsg:4326"))
library("flexdashboard")
library("rgdal")
library("leaflet")
library("raster")
library("sp")
library("tidyverse")
library("here")
library("foreign")
machine <- 'ajpelu'
machine <- 'ajpeluLap'
# stations
stations <- read.csv(here::here("data_raw/cli_estaciones.csv"), header = TRUE, sep = ";")
# Remove NAs y valores equivocados
# Remove stations with n_records == 0
s <- stations %>%
mutate(fecha_inicio = as.Date(fecha_inicio, format = "%Y-%m-%d"),
fecha_fin = as.Date(fecha_fin, format = "%Y-%m-%d")) %>%
drop_na(long:lat) %>%
filter(long > -6) %>%
filter(numero_registros > 0)
sp_station <- SpatialPointsDataFrame(coords = s[, c("long", "lat")], data = s)
proj4string(sp_station) <- CRS("+init=epsg:4326")
### --- Read limits of Sierra Nevada Protected area
mydsn = paste0('/Users/', machine, '/Google Drive/carto_public/EENNPP/InfGeografica/InfVectorial/Shapes/ED50_30')
enp <- readOGR(dsn=mydsn, layer = 'EENNPP', encoding="UTF-8", verbose = FALSE)
# proj4string(enp) <- CRS("+init=epsg:23030")
enp_r <- spTransform(enp, CRS("+init=epsg:4326"))
# Select Sierra Nevada
sn <- subset(enp_r, NOMBRE == 'SIERRA NEVADA' & FIGURA == 'Espacio Natural')
sn_nat <- subset(enp_r, NOMBRE == 'SIERRA NEVADA' & FIGURA == 'Parque Nacional')
## Stations REDIAM 2.0
sr <- read.dbf(file = here::here("data_raw/ESTACIONES.DBF"))
sr_station <- SpatialPointsDataFrame(coords = sr[, c("X_COORD", "Y_COORD")], data = sr)
proj4string(sr_station) <- CRS("+init=epsg:23030")
sr <- spTransform(sr, CRS("+init=epsg:4326"))
sr <- spTransform(sr_station, CRS("+init=epsg:4326"))
## Stations REDIAM 2.0
sr <- read.dbf(file = here::here("data_raw/ESTACIONES.DBF"))
sr_station <- SpatialPointsDataFrame(coords = sr[, c("X_COORD", "Y_COORD")], data = sr)
proj4string(sr_station) <- CRS("+init=epsg:23030")
sr_station <- spTransform(sr_station, CRS("+init=epsg:4326"))
sr_station@coords
head(sr_station@coords)
sr_station <- SpatialPointsDataFrame(coords = sr[, c("X_COORD", "Y_COORD")], data = sr)
proj4string(sr_station) <- CRS("+init=epsg:23030")
plot(sr_station)
plot(sn_stations, add=TRUE, col="green")
plot(sr_station)
points(sn_stations, add=TRUE, col="green")
plot(sr_station)
plot(sr_station)
points(sp_station, add=TRUE, col = 'red')
points(sp_station, add=TRUE, colour = 'red')
points(sp_station, add=TRUE)
plot(sp_station)
bbox(sp_station)
bbox(sr_station)
## Stations REDIAM 2.0
sr <- read.dbf(file = here::here("data_raw/ESTACIONES.DBF"))
sr_station <- SpatialPointsDataFrame(coords = sr[, c("X_COORD", "Y_COORD")], data = sr)
sr_station
sr$X_COORD
proj4string(sr_station) <- CRS("+init=epsg:23030")
sr_station <- spTransform(sr_station, CRS("+init=epsg:4326"))
plot(sr_station)
bbox(sr_station)
# Extent of map
# Set spatial extent
myext <- extent(sn)
popup_station <- paste0("<strong>Code:</strong> ", sp_station@data$codigo,
"<br><strong>Name:</strong> ", sp_station@data$nombre,
"<br><strong>Status:</strong> ",  ifelse(sp_station@data$estado == "t", "TRUE", "FALSE"),
"<br><strong>N records:</strong> ",  sp_station@data$numero_registros,
"<br><strong>Start date:</strong> ",  sp_station@data$fecha_inicio,
"<br><strong>End date:</strong> ",  sp_station@data$fecha_fin
)
mipal <- colorFactor(palette = c("purple", "blue"), levels = levels(sp_station@data$estado))
leaflet() %>%
fitBounds(myext@xmin, myext@ymin, myext@xmax, myext@ymax) %>%
addWMSTiles('http://www.ideandalucia.es/wms/mdt_2005?',
layers = 'Sombreado_10',
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = '<a href="http://www.juntadeandalucia.es/institutodeestadisticaycartografia" target="_blank">Instituto de Estadística y Cartografía de Andalucía</a>',
group = 'Hillshade') %>%
addTiles(urlTemplate = "http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",
attribution = '<a href="https://carto.com/attributions">CARTO</a>',
group = 'Basemap') %>%
addWMSTiles('http://www.ideandalucia.es/services/toporaster10/wms?',
layers = 'toporaster10',
options = WMSTileOptions(format = "image/png", transparent = FALSE),
attribution = '<a href="http://www.juntadeandalucia.es/institutodeestadisticaycartografia" target="_blank">Instituto de Estadística y Cartografía de Andalucía</a>',
group = 'Topographical') %>%
addProviderTiles("Esri.WorldImagery", group='Satellite') %>%
addProviderTiles("HikeBike.HillShading", group='Hillshade2') %>%
addLayersControl(position = 'bottomright',
baseGroups = c("Hillshade", "Satellite", "Basemap", "Topographical"),
overlayGroups = c('Natural Protected Area', 'Estaciones (OBSNEV)', 'Estaciones REDIAM'),
options = layersControlOptions(collapsed = FALSE)) %>%
addPolylines(data=sn, color='red',
group='Natural Protected Area', weight= 3) %>%
addCircleMarkers(sp_station@data,
lng=sp_station@data$long,
lat=sp_station@data$lat, group = "Estaciones (OBSNEV)",
# color = ~ mipal(sp_station@data$estado),
radius = 6, stroke = FALSE, fillOpacity = 0.7) %>%
addCircleMarkers(sr_station@data,
lng=sr_station@coords['X_COORD'],
lat=sr_station@coords['Y_COORD'],
group = "Estaciones REDIAM", color = "red",
# color = ~ mipal(sp_station@data$estado),
radius = 6, stroke = FALSE, fillOpacity = 0.7)
sr_station@coords[, 'X_COORD']
sr_station@coords[, 'Y_COORD']
?addCircles
coords(sr_station)
coord(sr_station)
coordinates(sr_station)
head(coordinates())
head(coordinates(sr_station))
sr_station@coords$X_COORD
sr_station@coords[,1]
sr_station@coords[,2]
sr_station@coords['X_COORD']
